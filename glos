#!/bin/sh

#GLOS MAIN DIRECTORY

##### Create Main DIR

mkdir core
mkdir rootfs
mkdir sources
mkdir sources/toolbox

#Get Sources

 cd sources

 sudo apt update
 sudo apt install git &y

##### Get Busybox

 git clone https://github.com/mirror/busybox.git
 
#FOLDER CALLED busybox

##### Get Syslinux

 git clone https://github.com/geneC/syslinux.git
 
#FOLDER CALLED syslinux

##### Get Linux Kernel

  git clone https://github.com/torvalds/linux.git
  
#FOLDER CALLED linux

cd ..

#RETURN TO MAIN DIR
 echo "RETURN TO MAIN DIR.... "
 
# Build Linux Kernel

### git clone https://github.com/torvalds/linux.git

	cd sources/linux
	
#	make clean

#	cp /boot/config-`uname -r`* .config

	make defconfig 

	make

# sudo make modules_install install

# sudo update-grub2

	cp -R arch/x86/boot/bzImage ../../core
	
#	 arch/x86/boot/bzImage _install
#	 arch/x86/boot/vmlinux.bin _install
#	 vmlinux _install

cd ../..

#RETURN TO MAIN DIR
 echo "RETURN TO MAIN DIR.... "

# Build Busybox

cd sources/busybox

make distclean defconfig
sed -i "s/.*CONFIG_STATIC.*/CONFIG_STATIC=y/" .config
make busybox install

cd _install

cp -r bin sbin usr ../../../rootfs

cd ../..

#RETURN TO MAIN DIR
 echo "RETURN TO MAIN DIR.... "

# Build Syslinux

cd sources/syslinux
make
cp bios/core/isolinux.bin _install
cp bios/com32/elflink/ldlinux/ldlinux.c32 _install

cd ..

cp syslinux/bios/core/isolinux.bin ../core
cp syslinux/bios/com32/elflink/ldlinux/ldlinux.c32 ../core

cd ..

#RETURN TO MAIN DIR
 echo "RETURN TO MAIN DIR.... "

#!!!!!!!!!!!!#
#Build Rootfs#
#!!!!!!!!!!!!#

cd rootfs

mkdir bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var

#-----------------------------------#
# Create etc init.d and Scripts     #
#-----------------------------------#

cd etc
mkdir init.d
cd init.d
mkdir addons core services
cd ..

# DIRECTORY= /etc
#Create rootfs file

cat > rootfs <<EOF
/dev/ram0
EOF

chmod +x rootfs

#Create rc.local

cat > rc.local <<EOF
#!/bin/
#
# cat DISPLAY=:0.0

EOF

chmod +x rc.local

#Create rc shutdown

cat > rc.shutdown <<EOF
#!/bin/busybox ash
# /etc/rc.shutdown - used by /etc/inittab to shutdown the system.

EOF

chmod +x rc.shutdown

#Create root user

cat > group <<EOF
root:x:0:

EOF

chmod +x group

#Create passwd

cat > passwd <<EOF
root:x:0:0:root:/root:/bin/ash

EOF

chmod +x passwd

#Create shadow

cat > shadow <<EOF
root::9804:0:::::

EOF

chmod +x shadow

#Create shells file

cat > shells <<EOF
# /etc/shells: valid login shells
/bin/sh
/bin/ash
/bin/bash
/bin/hush
/bin/false
/sbin/nologin

EOF

chmod +x shells

#********************#
# Create Boot Script #
#********************#
cat > bootscript.sh << EOF
#!/bin/sh
#
# :start busybox init rcS
# :clear and list
sh /etc/init.d/rcS
clear
ls -A

EOF

chmod +x bootscript.sh

#Create hosts file

cat > hosts <<EOF
127.0.0.1 localhost root
EOF

chmod +x hosts

#Create host.conf file

cat > host.conf <<EOF
order hosts,bind
multi on
EOF

chmod +x host.conf

#Create sudoers file

cat > sudoers <<EOF
#
# This file MUST be edited with the 'visudo' command as root.
#
# See the man page for details on how to write a sudoers file.
#
 
# Host alias specification

# User alias specification

# Cmnd alias specification
 
# User privilege specification
root    ALL=(ALL) ALL
root	ALL=NOPASSWD: ALL
EOF

chmod +x sudoers

#Create networks file

cat > networks <<EOF
localnet 127.0.0.0
EOF

chmod +x networks

#******************#
#CREATE THE NETWORK#
#******************#
cd init.d
cd services
mkdir network
cd network

# DIRECTORY= /etc/intit.d/services/network
#Create udhcpc

cat > udhcpc <<EOF
for DEVICE in /sys/class/net/* ; do
  ip link set \${DEVICE##*/} up
  [ \${DEVICE##*/} != lo ] && udhcpc -b -i \${DEVICE##*/} -s /etc/init.d/network/rc.dhcp
done
EOF

chmod +x udhcpc

#

#Create rc.dhcp Script

cat > rc.dhcp << EOF
#!/bin/sh

ip addr add \$ip/\$mask dev \$interface

if [ "\$router" ]; then
  ip route add default via \$router dev \$interface
fi

EOF

chmod +x rc.dhcp

# DNS resolving is done by using Google's public DNS servers

cat > resolv.conf << EOF
nameserver 8.8.8.8
nameserver 8.8.4.4

EOF

chmod +x resolv.conf

cd ../../..

# DIRECTORY= /etc
##################################
#Install Bootloader Welcome Image#
##################################

cat > welcome.txt << EOF
#        .--.    G I Z M O           
#       |o_o |   L I N U X          
#       |:_/ |   O P E R A T I N G  
#      //   \ \  S Y S T E M        
#     (|     | )                    
#    /'\_   _/'\                
#    \___)=(___/                  
#       #2016                     



EOF

chmod +x welcome.txt

#****************#
# Create inittab #
#****************#

cat > inittab << EOF
# /etc/inittab: init configuration for busybox init.
# Boot-time system configuration/initialization script.
#
::sysinit:/etc/bootscript.sh
::restart:/sbin/init
::ctrlaltdel:/sbin/reboot
::once:cat /etc/welcome.txt
::respawn:/bin/cttyhack /bin/sh
tty2::once:cat /etc/welcome.txt
tty2::respawn:/bin/sh
tty3::once:cat /etc/welcome.txt
tty3::respawn:/bin/sh
tty4::once:cat /etc/welcome.txt
tty4::respawn:/bin/sh

EOF

chmod +x inittab

cd ..

#RETURN TO "Root" DIR

# DIRECTORY= /
#**************#
# Create Intit #
#**************#

cat > init << EOF
#!/bin/sh

exec /sbin/init
EOF

chmod +x init

cd ..

#RETURN TO MAIN DIR
 echo "RETURN TO MAIN DIR.... "

#Create rcS file :: /etc/init.d/

cd rootfs/etc/init.d

cat > rcS <<EOF
#!/bin/sh
#
# *****************
# WRITE PERMISSIONS
# *****************
 busybox echo "The item WRITE PERMISSIONS is being processed..."
 busybox mount -t proc proc /proc
 busybox mount -o remount,rw /
#
# *******
# CLEANUP
# *******
 busybox echo "The item CLEANUP is being processed..."
 if [ ! -e /restart.log ]; then
   if [ ! -e /etc/cleanup.conf ]; then
     busybox echo FOLDERS_TO_CLEAN_DURING_BOOT: > /etc/cleanup.conf
     busybox echo /tmp >> /etc/cleanup.conf
     busybox echo /var/run >> /etc/cleanup.conf
   fi
   FOLDERS=$(busybox cat /etc/cleanup.conf)
   for i in $FOLDERS; do
     busybox rm -fr $i/.* 2>/dev/null busybox rm -fr $i/*
   done
 fi
#
# ********************
# VIRTUAL FILE SYSTEMS
# ********************
 busybox echo "The item VIRTUAL FILE SYSTEMS is being processed..."
 for i in dev dev/pts run sys; do
   if [ ! -e /$i ]; then
     busybox mkdir /$i
   fi
 done
 busybox mount -t sysfs sysfs /sys
 busybox mount -t tmpfs tmpfs /run
 busybox mount -t devpts devpts /dev/pts
#
# ************
# DEVICE NODES
# ************
 busybox echo "The item DEVICE NODES is being processed..."
 cd /dev
 busybox mdev -s
 busybox mknod fd0 b 2 0 2>null
 busybox mknod ppp c 108 0 2>null
 busybox mknod js0 c 13 0 2>null
#
# **************
# USER DIRECTORY
# **************
 busybox echo "The item USER DIRECTORY is being processed..."
 busybox mkdir /usr 2>null
 for i in bin lib sbin share; do
   busybox mkdir /usr/$i 2>null
 done
 busybox rm /usr/etc 2>null
 busybox ln -s /etc /usr/etc 2>null
 busybox rm /usr/var 2>null
 busybox ln -s /var /usr/var 2>null
 busybox rm /usr/local 2>null
 busybox ln -s /usr /usr/local 2>null
#
# ***************
# BUSYBOX APPLETS
# ***************
 busybox echo "The item BUSYBOX APPLETS is being processed..."
 /bin/busybox --install -s
 rm /linuxrc 2>null
 rm /init 2>null
 cd /dev
#
# **********
# INIT TABLE
# **********
 echo "The item INIT TABLE is being processed..."
 if [ ! -e /etc/inittab ]; then
   echo "::sysinit:/etc/init.d/rcS" > /etc/inittab
   for i in 1 2 3 4 5 6; do
     echo "tty$i::respawn:getty 38400 tty$i" >> /etc/inittab
   done
   echo "::ctrlaltdel:reboot" >> /etc/inittab
   echo "::shutdown:/etc/init.d/shutdown.sh" >> /etc/inittab
   if [ ! -e /restart.log ]; then
     echo "The system is going down for reboot now!"
     sleep 1
     reboot -f
   fi
 fi
#
# ******************
# FILE SYSTEMS TABLE
# ******************
 echo "The item FILE SYSTEMS TABLE is being processed..."
 for i in media media/cdrom media/disk media/floppy; do
   mkdir /$i 2>null
 done
 ln -sf /proc/mounts /etc/mtab
 cat /etc/mtab > /etc/fstab
 echo "/dev/cdrom /media/cdrom auto ro" >> /etc/fstab
 echo "/dev/floppy /media/floppy auto rw" >> /etc/fstab
 ln -sf fd0 floppy
#
# ****************
# ROOT FILE SYSTEM
# ****************
 echo "The item ROOT FILE SYSTEM is being processed..."
 readlink root > /etc/rootfs
 if [ -s /etc/rootfs ]; then
   ROOTFS=/dev/$(cat /etc/rootfs)
   else
   ROOTFS=/dev/ram0
 fi
 echo $ROOTFS > /etc/rootfs
#
# *****************
# FILE SYSTEM CHECK
# *****************
 echo "The item FILE SYSTEM CHECK is being processed..."
 if [ -e /etc/fsck ]; then
   if [ ! -e /restart.log ]; then
     mount -o remount,ro /
     MAX_MOUNTS_COUNT=$(cat /etc/fsck/max_mounts_count)
     tune2fs -c $MAX_MOUNTS_COUNT $ROOTFS 1>null
     e2fsck -p $ROOTFS
     mount -o remount,rw /
   fi
 fi
#
# ***********
# LOGS & PIDS
# ***********
 echo "The item LOGS & PIDS is being processed..."
 for i in var var/log var/run; do
   mkdir /$i 2>null
 done
 syslogd >null 2>&1
 klogd -c 3
 dmesg > /var/log/boot.log
 rm /var/log/gpu.log 2>null
#
# ***************
# SHUTDOWN SCRIPT
# ***************
 echo "The item SHUTDOWN SCRIPT is being processed..."
 if [ ! -e /etc/init.d/shutdown.sh ]; then
   echo "
   killall udevd 2>/dev/null
   killall saned 2>/dev/null
   alsactl store -f /etc/mixer/asound.state 2>/dev/null
   serverd stop 2>/dev/null
   killall5
   swapoff -a
   umount -a 2>/dev/null" > /etc/init.d/shutdown.sh
   chmod 755 /etc/init.d/shutdown.sh
 fi
#
# **************
# RESTART SCRIPT
# **************
 echo "The item RESTART SCRIPT is being processed..."
 if [ ! -e /etc/init.d/restart.sh ]; then
   echo "
   if [ ! -e /tmp/.X0-lock ]; then
     touch /restart.log
     /etc/init.d/shutdown.sh
     /etc/init.d/rcS
     else
     echo 'X is running. Close it and try again.'
   fi" > /etc/init.d/restart.sh
   chmod 755 /etc/init.d/restart.sh
 fi
 ln -sf /etc/init.d/restart.sh /sbin/restart
#
# ************
# ROOT ACCOUNT
# ************
 echo "The item ROOT ACCOUNT is being processed..."
 HOME=/root
 mkdir /home 2>null
 mkdir $HOME 2>null
 ROOT=configured
 for i in group passwd shadow; do
   if [ ! -e /etc/$i ]; then
     ROOT=unconfigured
   fi
 done
 if [ $ROOT = unconfigured ]; then
   echo "root:x:0:" > /etc/group
   echo "root:x:0:0:root:/root:/bin/ash" > /etc/passwd
   echo "root::9804:0:::::" > /etc/shadow
 fi
#
# *******
# PROFILE
# *******
 echo "The item PROFILE is being processed..."
 if [ ! -e /etc/profile ]; then
   PATH=/usr/sbin:/usr/bin:/usr/X11R6/bin:/sbin:/bin
   echo PATH=$PATH > /etc/profile
   echo 'PS1="\u@\h:\w\# "' >> /etc/profile
 fi
 if [ ! -e /etc/hostname ]; then
   echo "root"  > /etc/hostname
 fi
 echo 11.1 > /etc/glos-version
 if [ ! -e /etc/shells ]; then
   for i in sh ash hush; do
     echo "/bin/$i" >> /etc/shells
   done
 fi
#
# **********
# LOCAL HOST
# **********
 echo "The item LOCAL HOST is being processed..."
 if [ ! -e /etc/hosts ]; then
   echo "127.0.0.1 localhost root" > /etc/hosts
 fi
 if [ ! -e /etc/host.conf ]; then
   echo "order hosts,bind" > /etc/host.conf
   echo "multi on" >> /etc/host.conf
 fi
 if [ ! -e /etc/networks ]; then
   echo "localnet 127.0.0.0" > /etc/networks
 fi
 ifconfig lo 127.0.0.1 up
 route add -net 127.0.0.0 netmask 255.0.0.0 lo
 touch /etc/resolv.conf
#
# **************
# SWAP PARTITION
# **************
 echo "The item SWAP PARTITION is being processed..."
 if [ ! -e /etc/swap.conf ]; then
   echo ENABLE_SWAPPING=yes > /etc/swap.conf
 fi
 . /etc/swap.conf
 if [ $ENABLE_SWAPPING = yes ]; then
   SWAP=$(busybox fdisk -l /dev/sda | grep "Linux swap"| head -n 1| cut -c 6,7,8,9,10) 2>null
   FSTAB_SWAP="# No partition to swap."
   if [ -b /dev/$SWAP ]; then
     ln -sf $SWAP swap
     FSTAB_SWAP="/dev/$SWAP swap swap default 0 0"
   fi
   echo $FSTAB_SWAP >> /etc/fstab
   swapon -a
 fi
#
# **********
# XZ SUPPORT
# **********
 echo "The item XZ SUPPORT is being processed..."
 mkdir /tmp 2>null
 XZ=unistalled
 cp /etc/init.d/addons/addon_glibc.tar.xz /tmp/glibc.tar.xz 2>null
 if [ -e /tmp/glibc.tar.xz ]; then
   busybox xz -d /tmp/glibc.tar.xz
   busybox tar -x -f /tmp/glibc.tar -C /
   rm -f /tmp/glibc.tar
   cp /etc/init.d/addons/addon_xz.tar.xz /tmp/xz.tar.xz 2>null
   if [ -e /tmp/xz.tar.xz ]; then
     busybox xz -d /tmp/xz.tar.xz
     busybox tar -x -f /tmp/xz.tar -C /
     rm -f /tmp/xz.tar
     XZ=installed
   fi
 fi
#
# **********
# NEW ADDONS
# **********
 echo "The item NEW ADDONS is being processed..."
 mkdir /var/root 2>null
 mv /etc/init.d/addons/core /var/glos 2>null
 #mv /etc/init.d/addons /var/glos 2>null
 ADDON_LIST=$(ls /etc/init.d/addons/addon_*.tar.xz 2>null)
 for i in $ADDON_LIST; do
   echo "->Installing $i"
   if [ $XZ = installed ]; then
     xz -k -d $i
     mv $i /var/glos
     else
     cp -f $i /var/glos
     busybox xz -d $i
   fi
   tar -x -f /etc/init.d/addons/*.tar -C /
   rm /etc/init.d/addons/*.tar
 done
#
# ****
# BASH
# ****
 echo "The item BASH is being processed..."
 sed -i '/bash/d' /etc/shells
 if [ -e /usr/bin/bash ]; then
   echo /bin/bash >> /etc/shells
   if [ ! -e $HOME/.bashrc ]; then
     echo 'export PS1="\u@\h:\w\$ "' > $HOME/.bashrc
     sed -i 's/ash/bash/g' /etc/passwd
   fi
 fi
#
# *****
# CACHE
# *****
 echo "The item CACHE is being processed..."
 if [ ! -e /etc/ld.so.conf ]; then
   echo "/lib" > /etc/ld.so.conf
   echo "/usr/lib" >> /etc/ld.so.conf
 fi
 mkdir /var/cache 2>null
 ldconfig 2>null
 mkfontdir /usr/share/fonts/* 2>null
 fc-cache 2>null &
#
# **************
# KERNEL MODULES
# **************
 echo "The item KERNEL MODULES is being processed..."
 mkdir /lib/modules 2>null
 KERNEL=$(uname -r) && mkdir /lib/modules/$KERNEL 2>null
 if [ ! -s /lib/modules/$KERNEL/modules.dep ]; then
   if [ -e /sbin/kmod ]; then
     mv /lib/modules/$KERNEL/kernel/drivers/gpu / 2>null
     depmod
     mv /lib/modules/$KERNEL/modules.dep.bin /lib/modules/$KERNEL/modules.dep.nogpu
     mv /lib/modules/$KERNEL/modules.alias.bin /lib/modules/$KERNEL/modules.alias.nogpu
     mv /gpu /lib/modules/$KERNEL/kernel/drivers/ 2>null
     depmod
     mv /lib/modules/$KERNEL/modules.dep.bin /lib/modules/$KERNEL/modules.dep.gpu
     mv /lib/modules/$KERNEL/modules.alias.bin /lib/modules/$KERNEL/modules.alias.gpu
   fi
 fi
#
# ****************
# VESA FRAMEBUFFER
# ****************
 echo "The item VESA FRAMEBUFFER is being processed..."
 if [ ! -e /restart.log ]; then
   if [ -e /sys/class/graphics/fb0 ]; then
     if [ -e /etc/gpu/gpu.config ]; then
       sed -i 's/GPU=yes/GPU=no/g' /etc/gpu/gpu.config
       sed -i 's/X=yes/X=no/g' /etc/gpu/gpu.config
     fi
   fi
   else
   rm /restart.log
 fi
#
# ***************
# GPU FRAMEBUFFER
# ***************
 echo "The item GPU FRAMEBUFFER is being processed..."
 GPU=no
 if [ -e /etc/gpu/gpu.config ]; then
   . /etc/gpu/gpu.config
   ln -sf /usr/share/fb/fb.modes /etc/fb.modes
 fi
 if [ -e /sbin/kmod ]; then
   ln -sf /lib/modules/$KERNEL/modules.dep.nogpu /lib/modules/$KERNEL/modules.dep.bin
   ln -sf /lib/modules/$KERNEL/modules.alias.nogpu /lib/modules/$KERNEL/modules.alias.bin
   if [ $GPU = yes ]; then
     ln -sf /lib/modules/$KERNEL/modules.dep.gpu /lib/modules/$KERNEL/modules.dep.bin
     ln -sf /lib/modules/$KERNEL/modules.alias.gpu /lib/modules/$KERNEL/modules.alias.bin
     touch /var/log/gpu.log
   fi
 fi
#
# *************
# INPUT DEVICES
# *************
 echo "The item INPUT DEVICES is being processed..."
 modprobe ehci-pci 2>null
 modprobe ohci-pci 2>null
 modprobe uhci-hcd 2>null
 modprobe xhci-hcd 2>null
 modprobe hid-generic 2>null
 for i in hid kbd mouse; do
   modprobe usb$i 2>null
 done
 modprobe psmouse 2>null
 if [ -e /etc/gpm/gpm.conf ]; then
   . /etc/gpm/gpm.conf
 fi
 gpm -m $DEVICE -t $TYPE 2>null
#
# ***********
# UDEV DAEMON
# ***********
 echo "The item UDEV DAEMON is being processed..."
 for i in audio cdrom dialout disk input kmem lp tape tty video; do
   addgroup $i 2>null
 done
 udevadm hwdb --update >null 2>&1
 udevd --daemon >null 2>&1
 udevadm trigger >null 2>&1
 udevadm settle >null 2>&1
 if [ ! -e /usr/sbin/udevd ]; then
   echo /sbin/mdev > /proc/sys/kernel/hotplug
 fi
#
# ***********
# DBUS DAEMON
# ***********
 echo "The item DBUS DAEMON is being processed..."
 adduser -H -D messagebus 2>null
 killall dbus-daemon 2>null
 rm -fr /var/run/dbus
 mkdir /var/run/dbus
 dbus-uuidgen --ensure 2>null
 dbus-daemon --system 2>null
 bluetoothd 2>null &
#
# ***********
# ACPI DAEMON
# ***********
 echo "The item ACPI DAEMON is being processed..."
 if [ -e /lib/modules/$KERNEL/kernel/drivers/acpi ]; then
   if [ ! -e /etc/acpi/button.cfg ]; then
     mkdir /etc/acpi 2>null
     mkdir /etc/acpi/PWRF 2>null
     MESSAGE="Default action when PowerOff Button is pressed:"
     echo "# $MESSAGE" > /etc/acpi/button.cfg
     echo poweroff >> /etc/acpi/button.cfg
     echo ". /etc/acpi/button.cfg" > /etc/acpi/PWRF/00000080
     chmod 775 /etc/acpi/PWRF/00000080
   fi
 fi
 acpid
#
# *********
# AUTOMOUNT
# *********
 echo "The item AUTOMOUNT is being processed..."
 echo "# Disks to mount during the boot time:" > /tmp/automount
 echo MOUNT_HARD_DISK=yes >> /tmp/automount
 echo MOUNT_REMOVABLE_DISK=yes >> /tmp/automount
 echo MOUNT_CDROM_DISK=no >> /tmp/automount
 . /tmp/automount
 if [ ! -e /etc/automount.conf ]; then
   cat /tmp/automount > /etc/automount.conf
 fi
 rm /tmp/automount
 . /etc/automount.conf
#
# *********
# HARD DISK
# *********
 echo "The item HARD DISK is being processed..."
 mkdir /mnt 2>null
 rmdir /mnt/* 2>null
 if [ -e /dev/sda ]; then
   for i in $(ls sda*) ; do
     mkdir /mnt/$i 2>null
     rmdir /mnt/sda 2>null
     if [ -e /dev/root ]; then
       rmdir /mnt/$(readlink root) 2>null
     fi
     if [ $MOUNT_HARD_DISK = yes ]; then
       ntfs-3g $i /mnt/$i 2>null
       mount $i /mnt/$i 2>null
       rmdir /mnt/* 2>null
     fi
     if [ -e /mnt/$i ]; then
       echo "/dev/$i /mnt/$i auto rw" >> /etc/fstab
     fi
   done
 fi
#
# ***************
# REMOVABLE DISKS
# ***************
 echo "The item REMOVABLE DISKS is being processed..."
 rmdir /media/disk/* 2>null
 if [ -e /dev/sda ]; then
   for i in $(ls sd* | grep -v sda); do
     mkdir /media/disk/$i 2>null
     if [ $MOUNT_REMOVABLE_DISK = yes ]; then
       ntfs-3g $i /media/disk/$i 2>null
       mount $i /media/disk/$i 2>null
       rmdir /media/disk/* 2>null
     fi
     if [ -e /media/disk/$i ]; then
       echo "/dev/$i /media/disk/$i auto rw" >> /etc/fstab
     fi
   done
 fi
#
# ************
# OPTICAL DISC
# ************
 echo "The item OPTICAL DISC is being processed..."
 if [ -e sr0 ]; then
   for i in cdrom bluray dvd; do
     ln -sf sr0 $i
   done
   cd /media
   rm bluray 2>/dev/null
   ln -s cdrom bluray
   rm dvd 2>/dev/null
   ln -s cdrom dvd
   cd /dev
   if [ $MOUNT_CDROM_DISK = yes ]; then
     mount /dev/cdrom
   fi
 fi
#
# *******************
# NAME SERVICE SWITCH
# *******************
 echo "The item NAME SERVICE SWITCH is being processed..."
 if [ -e /lib/libnss_files.so.2 ]; then
   if [ ! -e /etc/nsswitch.conf ]; then
     for i in passwd group shadow; do
       echo "$i: files" >> /etc/nsswitch.conf
     done
     echo "hosts: files dns" >> /etc/nsswitch.conf
     for i in networks rpc services; do
       echo "$i: files" >> /etc/nsswitch.conf
     done
   fi
 fi
#
# **************
# WPA SUPPLICANT
# **************
 echo "The item WPA SUPPLICANT is being processed..."
 CONFIG=/etc/net/wifi/wpa_supplicant.conf
 DEFCONFIG=/etc/wpa_supplicant.conf
 if [ -e $CONFIG ]; then
   ln -sf $CONFIG $DEFCONFIG
 fi
 if [ -e /var/run/wpa_supplicant ]; then
   killall wpa_supplicant
   sleep 2
   rm -fr /var/run/wpa_supplicant
 fi
#
# *****************
# NETWORK INTERFACE
# *****************
 echo "The item NETWORK INTERFACE is being processed..."
 INTERFACE=eth0
 if [ -e /etc/interface ]; then
   INTERFACE=$(cat /etc/interface)
 fi
 echo $INTERFACE > /etc/interface
 if [ -e /etc/net/wifi/wifi.conf ]; then
   . /etc/net/wifi/wifi.conf
   if [ $WPA = yes ]; then
     wpa_supplicant -i$INTERFACE -c$DEFCONFIG >null 2>&1 &
     else
     iwconfig $INTERFACE key $KEY essid $ESSID mode $MODE 2>null
   fi
 fi
#
# *******************
# INTERNET CONNECTION
# *******************
 echo "The item INTERNET CONNECTION is being processed..."
 if [ ! $INTERFACE = ppp0 ]; then
   STATIC=no
   if [ -e /etc/net/net.conf ]; then
     . /etc/net/net.conf
   fi
   if [ $STATIC = no ]; then
     udhcpc -i $INTERFACE -n -p /var/run/dhcp.pid >null 2>&1 &
     else
     ifconfig $INTERFACE $IP netmask $NETMASK up
     route add default gateway $GATEWAY
     echo "nameserver $DNS_SERVER" > /etc/resolv.conf
   fi
 fi
#
# *****
# MODEM
# *****
 echo "The item MODEM is being processed..."
 if [ -e /usr/share/usb_modeswitch/usb_modeswitch.conf ]; then
   ln -s /usr/share/usb_modeswitch/usb_modeswitch.conf /etc 2>null
 fi
 if [ $INTERFACE = ppp0 ]; then
   if [ -e /usr/bin/wvdialconf ]; then
     echo "[Dialer Defaults]" > /etc/ppp/wvdial.conf
     for i in Password Phone Username; do
       I=$(cat /etc/net/modem/$i|grep -v Replace)
       echo "$i = $I" >> /etc/ppp/wvdial.conf
     done
     wvdialconf /etc/ppp/wvdial.conf >null 2>&1
     wvdial -C /etc/ppp/wvdial.conf 2>null &
   fi
 fi
#
# ***********
# SOUND MIXER
# ***********
 echo "The item SOUND MIXER is being processed..."
 for i in pcm_oss mixer_oss seq_oss; do
   modprobe snd_$i 2>null
 done
 if [ -e /dev/mixer ]; then
   mkdir /etc/mixer 2>null
   if [ ! -e /etc/mixer/aumixrc ]; then
     touch /etc/mixer/aumixrc && aumix -v 95 2>null
     aumix -q > /etc/mixer/aumixrc 2>null
     sed -i 's/0, 0/90, 90/g' /etc/mixer/aumixrc
     aumix -f /etc/mixer/aumixrc -L >null 2>&1
     else
     alsactl restore -f /etc/mixer/asound.state 2>null
   fi
 fi
#
# ************
# KERNEL IMAGE
# ************
 echo "The item KERNEL IMAGE is being processed..."
 mkdir /boot 2>null
 cp /proc/config.gz /boot
 gunzip -f /boot/config.gz
 dmesg > /boot/boot.log
 if [ ! -e /boot/bzImage ]; then
   tar -xz -f /var/root/core/kernel-$KERNEL.tar.xz -C / 2>null
 fi
#
# ****************
# LILO BOOT LOADER
# ****************
 echo "The item LILO BOOT LOADER is being processed..."
 if [ -e /sbin/lilo ]; then
   if [ -e /boot/bzImage ]; then
     if [ ! -e /etc/lilo.conf ]; then
       echo "boot=$ROOTFS" > /etc/lilo.conf
       echo "image=/boot/bzImage" >> /etc/lilo.conf
       echo "root=$ROOTFS" >> /etc/lilo.conf
       echo "label=root" >> /etc/lilo.conf
       echo "read-only" >> /etc/lilo.conf
       echo "vga=normal" >> /etc/lilo.conf
     fi
   fi
 fi
#*************************
# AUTOSTART Login
#*************************
#. /autostart
# *****
# LOGIN
# *****
 echo "The item LOGIN is being processed..."
 if [ $ROOT = unconfigured ]; then
   clear
   passwd
 fi
 date > /etc/issue
 echo "" >> /etc/issue
 cal >> /etc/issue
 echo "" >> /etc/issue
 hostname -F /etc/hostname
 reset
# ******************************
##clean screen,welcome,autologin
# ******************************
clear
cat /etc/welcome.txt
exec login -f root & cd .. & ls -A

EOF

cd ../../..
#RETURN TO MAIN DIR

# Adding GLOS Toolbox " addon_toolbox.tar.xz "

 mv addon_toolbox.tar.xz sources/toolbox

cd sources/toolbox

tar -xvf addon_toolbox.tar.xz
	
	cp -R  etc ../../rootfs
       #rm -R  etc

cd ../..
#RETURN TO MAIN DIR

 echo "RETURN TO MAIN DIR.... "

cd sources

echo 'default bzImage initrd=rootfs.gz' > ../core/isolinux.cfg

cd ..
#RETURN TO MAIN DIR

 echo "RETURN TO MAIN DIR.... "

#Build core Rootfs

 echo "The rootfs.gz is being created in core..."

cd rootfs

find . | cpio -R root:root -H newc -o | gzip > ../core/rootfs.gz

cd ..
#RETURN TO MAIN DIR

 echo "RETURN TO MAIN DIR.... "

#Build ISO

 echo "The Iso and/or Image is being created ..."
 
cd core

genisoimage \
    	-J \
    	-r \
    	-o ../GLOS.iso \
    	-b isolinux.bin \
    	-c boot.cat \
    	-input-charset UTF-8 \
    	-no-emul-boot \
    	-boot-load-size 4 \
    	-boot-info-table \
        -joliet-long \
    	./
    
    cd ..
#RETURN TO MAIN DIR
